name: Build and Test on Windows ARM64

on: [push, pull_request]

jobs:
  build-cryptography-arm64:
    name: Build cryptography wheel for Windows ARM64
    runs-on: windows-latest  # Usa runner x64 para cross-compilar

    steps:
      - name: Checkout cryptography source
        uses: actions/checkout@v4
        with:
          repository: pyca/cryptography
          ref: '45.0.3'

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Set up Rust with ARM64 target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-pc-windows-msvc
          components: rust-src

      - name: Install cargo-xwin for cross-compilation
        run: cargo install cargo-xwin

      - name: Install maturin
        run: pip install maturin

      - name: Install cffi (requerido para build)
        run: pip install cffi

      - name: Install setuptools (requerido para build)
        run: pip install setuptools

      - name: Download WinUniversal OpenSSL v3.5.0 installer
        run: |
          Invoke-WebRequest -Uri "https://slproweb.com/download/WinUniversalOpenSSL-3_5_0.exe" -OutFile $env:RUNNER_TEMP\WinUniversalOpenSSL-3_5_0.exe

      - name: Install WinUniversal OpenSSL v3.5.0 (silent)
        run: |
          Start-Process -FilePath $env:RUNNER_TEMP\WinUniversalOpenSSL-3_5_0.exe -ArgumentList "/silent", "/verysilent", "/sp-", "/suppressmsgboxes", "/DIR=C:\OpenSSL-Universal" -Wait

      - name: Download Python 3.13 ARM64 dev libraries
        run: |
          Invoke-WebRequest -Uri "https://www.nuget.org/api/v2/package/pythonarm64/3.13.3" -OutFile python-arm64.zip
          Expand-Archive -Path python-arm64.zip -DestinationPath $env:RUNNER_TEMP\python-arm64

      - name: Build cryptography wheel
        run: |
          $env:LIB="$env:RUNNER_TEMP\python-arm64\tools\libs;C:\OpenSSL-Universal\lib\VC\arm64\MT;$env:LIB"
          maturin build --release --target aarch64-pc-windows-msvc --out dist -i python3.13
        env:
          MATURIN_USE_XWIN: "1"
          RUSTFLAGS: "-Ctarget-feature=+crt-static"
          OPENSSL_DIR: C:\OpenSSL-Universal
          OPENSSL_LIB_DIR: C:\OpenSSL-Universal\lib\VC\arm64\MT
          OPENSSL_INCLUDE_DIR: C:\OpenSSL-Universal\include\arm64

      - name: List built wheels and show wheel filename
        run: |
          dir dist

      - name: Upload built wheels
        uses: actions/upload-artifact@v4
        with:
          name: cryptography-wheel-arm64
          path: dist/*.whl

  test-windows-arm64:
    name: Test on Windows ARM64
    needs: build-cryptography-arm64
    runs-on: windows-11-arm

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Download built wheels
        uses: actions/download-artifact@v4
        with:
          name: cryptography-wheel-arm64
          path: ./wheelhouse

      - name: List files in wheelhouse before install
        run: |
          dir wheelhouse

      - name: Download and extract ARM64 wheels pack (Gohlke)
        run: |
          Invoke-WebRequest -Uri "https://github.com/cgohlke/win_arm64-wheels/releases/download/v2025.3.31/2025.3.31-experimental-cp313-win_arm64.whl.zip" -OutFile wheels-arm64.zip
          Expand-Archive -Path wheels-arm64.zip -DestinationPath wheels-arm64

      - name: Install ARM64 wheels from pack
        run: |
          pip install wheels-arm64/bcrypt-4.3.0-cp313-cp313-win_arm64.whl
          pip install wheels-arm64/cffi-1.17.1-cp313-cp313-win_arm64.whl
          pip install wheels-arm64/greenlet-3.1.1-cp313-cp313-win_arm64.whl
          pip install wheels-arm64/numpy-2.2.4-cp313-cp313-win_arm64.whl
          pip install wheels-arm64/pandas-2.2.3-cp313-cp313-win_arm64.whl
          pip install wheels-arm64/pyodbc-5.2.0-cp313-cp313-win_arm64.whl
          pip install wheels-arm64/SQLAlchemy-2.0.40-cp313-cp313-win_arm64.whl

      - name: Install cryptography wheel and other dependencies
        run: |
          pip install --upgrade pip
          pip install $(Resolve-Path wheelhouse/cryptography*.whl)
          if (Test-Path requirements.txt) { pip install -r requirements.txt }

      - name: Compile Cython code
        run: |
          python src/setup.py build_ext --inplace

      - name: Run Pytest
        run: |
          pytest tests/

      - name: List files in /build
        run: |
          dir /build
